#Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике. 
#Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать.
#Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их произведение P. 
#Помогите Кате отгадать задуманные Петей числа.
#Примеры/Тесты:
#4 4 -> 2 2
#5 6 -> 2 3
#Примечание.
#Здесь нужно составить два уравнения. Которые приведут к квадратному уравнению.
#Кто не помнит, как решать квадратное уравнение - посмотрите в сети. Обойдите дополнительной 
#проверкой возможность комплексных решений. Можно игнорировать то, что получаться рациональные решения вместо натуральных.
#Для вычисления квадратного корня используйте возведение в степень 0.5 или 
#(*) Усложнение. найдите самостоятельно в сети какая функция стандартной библиотеки вычисляет квадратный
#корень и как до нее добраться.
"""
sum = int(input("Введите сумму чисел: "))
mult = int(input("Введите произведение чисел: "))
flag = "Я не угадаю!"

for i in range (1,mult):
    s = sum - i
    if i + s == sum and i * s == mult:
        flag = f"{s} and {i}"
        break
print(flag)
"""
#Еще один вариант.
"""
P = abs(int(input("Введите произведение чисел: ")))
S = abs(int(input("Введите сумму чисел: ")))

y = float((S + ((-S) ** 2 - 4 * P) ** 0.5) / 2)
x = float((S - ((-S) ** 2 - 4 * P) ** 0.5) / 2)
print(x, y)
"""
#(*) Усложнение. найдите самостоятельно в сети какая функция стандартной библиотеки вычисляет квадратный
#корень и как до нее добраться.

import cmath

P = abs(int(input("Введите произведение чисел: ")))
S = abs(int(input("Введите сумму чисел: ")))

y1 = cmath.sqrt(float((-S) ** 2 - 4 * P))
x1 = cmath.sqrt(float((-S) ** 2 - 4 * P))
y = (S + y1) / 2
x = (S - x1) / 2

print(x, y)